= mongo_inviteable

Now works for both Mongoid and Mongo_Mapper!

== Installation

In console:
  gem install mongo_inviteable
or in Gemfile:
  gem 'mongo_inviteable'

== Notice

Please read inviting documentation first. Since 0.3.2, some apis have been changed. Sorry for the inconvenience.

If you want to remove `invite_history` and `invited_history` fields totally from your database after you decide not to use invite/invited history feature, do this:

    # in the rails console, taking user as an example:
    User.all.each { |u| u.unset(:invite_history) } # this will remove the invite_history field

== Usage

To make model inviteable you need to include Mongo::Inviteable into your model; You also need to include Mongo::Inviter in your inviter model:
  class User
    include Mongoid::Document  #for Mongo_Mapper users, this line of code should be include MongoMapper::Document
    include Mongo::Inviteable::Invited
    include Mongo::Inviteable::Inviter
    include Mongo::Inviteable::History # you have to add this line to enable invite/invited history
  end

  class Group
    include Mongoid::Document  #for Mongo_Mapper users, this line of code should be include MongoMapper::Document
    include Mongo::Inviteable::Invited
    include Mongo::Inviteable::History # you have to add this line to enable invite/invited history
  end

I've decided to remove authorization because it is quite inefficient to keep this field for every record in the database.
However, it's possible that I'll add it back as a plugin in the future.

And then you can invite and uninvite:

    @group = Group.new
    @group.save

    current_user.invite(@group)
    current_user.uninvite(@group)
    current_user.uninvite_all

    current_user.invite(*array_of_objects_to_invite) # invite an array of objects
    current_user.uninvite(*array_of_objects_to_invite) # uninvite

or,

    @group.uninvited(current_user)
    @group.uninvited_all

It's also possible to pass a block:

    current_user.invite(u1, u2, u3, u4...) { |user| user.name == 'Jeremy Lin' }
    current_user.uninvite(u1, u2, u3, u4...) { |user| user.invitee_of? @kobe_bryant }

    @group.uninvited(u1, u2, u3...) { |user| user.ever_invite.include? @some_user }

You can also judge whether a model is a inviter of another model or a model is a invitee of another model:

    current_user.inviter_of?(@group)
    current_user.invitee_of?(@group)

or whether a model is inviting some other model and vice versa:

    current_user.inviting?
    @group.invited?

Moreover, it's easy to get a model's inviter/invitee count:

    current_user.inviters_count
    current_user.invitees_count

Of course, you can get a list of inviters/invitees:
    	
    User.inviters_of(@group)
    User.invitees_of(@group)

    @group.all_inviters
    @user.all_invitees

Getting a model's inviters/invitees by type is also possible:

    @group.inviters_by_type("user")
    @user.invitees_by_type("group")

Dealing with model names:

    @group.inviters_by_type("user")
    @group.inviters_by_type("User")
    @group.inviters_by_type("user_post") # both are fine
    @user.invitees_by_type("GroupPost")

And their count:

    @group.inviters_by_type("user")
    @group.inviters_count_by_type("user")
    @user.invitees_by_type("group")
    @user.invitees_count_by_type("group")

You can also get a model's invite/invited history:

    @user.ever_invite
    @group.ever_invited

or to tell if ever invite/invited by someone:

    @user.ever_invite? @some_group
    @group.ever_invited? @some_user

Sure you can clear the histories:

    @user.clear_history!

    #or more specific:

    @user.clear_invite_history!
    @group.clear_invited_history!

Another feature is to get a list of models which has the most inviters/invitees:

    User.with_max_invitees
    User.with_min_invitees
    User.with_max_invitees_by_type('group')
    User.with_min_invitees_by_type('group')
    Group.with_max_inviters
    Group.with_min_inviters
    Group.with_max_inviters_by_type('user')
    Group.with_min_inviters_by_type('user')

Now you can tell if two models have some common inviters/invitees by inviting methods:

    @user.common_invitees?(@another_user)
    @user.common_inviters?(@group)

And see what the common inviters/invitees are:

    @user.common_invitees_with(@another_user)
    @user.common_inviters_with(@group)
    
* Any bug or issue, please send me an email: ustc.flyingfox@gmail.com
                                                  include Mongo::Inviteable::History # you have to add this line to enable invite/invited history
== TODO

* inter-models inviteable #FINISHED#
* divide into two parts: inviteable(being invited) and inviter(inviting others) #FINISHED#
* inviting history/invited history #FINISHED#
* most/least invited/inviting #FINISHED
* add authorization to inviteable models #FINISHED#
* common inviters/invitees #FINISHED#
* add support for mongo_mapper in next version #FINISHED#
* implement plugins: confirmation, authorization etc.

!!If you have any advice, plese do not hesitate to tell me!!

== Thanks

Thanks the author(s) of acts_as_inviteable, you can find this gem here[https://github.com/xpepermint/acts_as_inviteable]

Thanks the author(s) of voteable_mongo, you can find this gem here[https://github.com/vinova/voteable_mongo]

== Copyright

Copyright (c) Jie Fan. See LICENSE.txt for further details.    
